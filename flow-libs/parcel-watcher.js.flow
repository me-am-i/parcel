// @flow

// Derived from the README and source of ncp located at
// https://github.com/AvianFlu/ncp and
// https://github.com/AvianFlu/ncp/blob/6820b0fbe3f7400fdb283c741ef88b6d8e2d4994/lib/ncp.js
// Which is licensed MIT

declare module '@parcel/watcher' {
  declare type FilePath = string;
  declare type Options = {|
    ignore?: Array<FilePath>,
    backend?: 'fs-events' | 'watchman' | 'inotify' | 'windows' | 'brute-force'
  |};
  declare type AsyncSubscription = {|unsubscribe: () => Promise<mixed>|};
  declare type Event = {|
    +path: FilePath,
    +type: 'create' | 'update' | 'delete'
  |};

  declare module.exports: {
    getEventsSince(
      dir: FilePath,
      snapshot: FilePath,
      opts: Options
    ): Promise<Array<Event>>,
    subscribe(
      dir: FilePath,
      fn: (err: Error, events: Array<Event>) => mixed,
      opts: Options
    ): AsyncSubscription,
    unsubscribe(
      dir: FilePath,
      fn: (err: Error, events: Array<Event>) => mixed,
      opts: Options
    ): Promise<mixed>,
    writeSnapshot(
      dir: FilePath,
      snapshot: FilePath,
      opts: Options
    ): Promise<FilePath>
  };
}

// const binding = require('bindings')('watcher.node');
// const path = require('path');

// function normalizeOptions(dir, opts = {}) {
//   if (Array.isArray(opts.ignore)) {
//     opts = Object.assign({}, opts, {
//       ignore: opts.ignore.map(ignore => path.resolve(dir, ignore))
//     });
//   }

//   return opts;
// }

// exports.writeSnapshot = (dir, snapshot, opts) => {
//   return binding.writeSnapshot(path.resolve(dir), path.resolve(snapshot), normalizeOptions(dir, opts));
// };

// exports.getEventsSince = (dir, snapshot, opts) => {
//   return binding.getEventsSince(path.resolve(dir), path.resolve(snapshot), normalizeOptions(dir, opts));
// };

// exports.subscribe = async (dir, fn, opts) => {
//   dir = path.resolve(dir);
//   opts = normalizeOptions(dir, opts);
//   await binding.subscribe(dir, fn, opts);

//   return {
//     unsubscribe() {
//       return binding.unsubscribe(dir, fn, opts);
//     }
//   };
// };

// exports.unsubscribe = (dir, fn, opts) => {
//   return binding.unsubscribe(path.resolve(dir), fn, normalizeOptions(dir, opts));
// };
